Декоратор - функция, которая принимает другую функцию и что-то возвращает;
Возвращаемый обьект может быть любого типа;
@trace
def foo(x):
    return 42

same as:

def foo(x):
    return 42

foo = trace(foo)

Декорируемая функция не имеет части атрибутов, которые имела оригинальная функция, в частности у нее отсутствует
атрибут doc используемый для документации.

У любой ф-ии есть атрибут __module__ , содержащий имя модуля, в котором ф-я была определена.
Для ф-й определенных в интерпритаторе, например identity.__module__ -> __main__

**
Можно обобщить логику декоратора с аргументами в виду декоратора with_arguments;
что происходит:
1. with_arguments принимает декоратор deco
2. заворачивает его во wrapper, так как deco - декоратор с аргументами, а затем в decorator.
3. decorator конструирует новый декоратор с помощью deco и копирует в него внутреннние атрибуты ф-ии func.