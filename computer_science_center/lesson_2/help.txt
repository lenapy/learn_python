--------------
unique_func.py
--------------
print(unique(xs)) # prints [1, 2, 3]
print(unique(xs)) # prints []
Значение аргументов по умолчанию инициализируется ровно один раз, в момент компиляции в байт код.
Абсолютно все вызовы ф-ии unique будут разделять значение атрибута seen.
Таким обрвзом после того, как ми в первый раз вызвали unique мы заполнили сет seen элементами 1, 2, 3
и во второй раз уникальных эелементов вроде бы уже нет, потому что мы переиспользовали сет с предыдущего вызова.
-----------------------------------------------------------------------------------------------------
Правило: никогда не использовать изменяемые значения как значения по умолчнию в т.ч. списки, словари
-----------------------------------------------------------------------------------------------------
У каждой ф-ии есть атрибут __defaults__ с инициализированными значениями аргументами по умолчанию.
(unique.__defaults__) # prints ({1, 2, 3}, )



** None не изменяемый потому, что он singleton

** falsy value это что-то, что не False (bool), но на него можно посмотреть как на что-то, что похожее на False
falsy values :
0; 0,0; ""; []; {}; (); set(); None.

*args - позиционные аргументы, которые распаковываются
**kwargs - ключевые аргументы, которые распаковываются

** В пайтон ф-ии - объекты  первого класса, то есть с ними иожно делать все то же самое, что и с другими значениями,
например обьявлять функции в других функциях

---------------------------------------------------------------------------------------------------------------------
                                            Области видимости (Правило LEGB)
---------------------------------------------------------------------------------------------------------------------
Поиск имен ведется не более, чем в четырех областях видимости: локальной, затем в обьемлющей ф-ии (если такая есть),
затем в глобальной и, наконец во встроенной.
L - local
E - enclosing
G - global
B - builtin

>> min # builtin
>> min = 42 # global
>> def f(*args):
        min = 2
        def g():  # enclosing
            min = 4 # local
            print(min)

Ф-ии в пайтон могут использовать переменные, определенные во внешних областях видимости.

!!! Важно помнить, что поиск переменных осуществляется во время исполнения ф-ии, а не во время обьявления.

По умолчанию операция присваивания создает локальную переменную.
Изменить это поведения можно с помощью операторов global и nonlocal
